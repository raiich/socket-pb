// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        v5.29.3
// source: packet/v1/packet.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HandshakeStatus int32

const (
	HandshakeStatus_OK          HandshakeStatus = 0
	HandshakeStatus_RETRY_LATER HandshakeStatus = 1
	HandshakeStatus_UNACCEPTED  HandshakeStatus = 2
)

// Enum value maps for HandshakeStatus.
var (
	HandshakeStatus_name = map[int32]string{
		0: "OK",
		1: "RETRY_LATER",
		2: "UNACCEPTED",
	}
	HandshakeStatus_value = map[string]int32{
		"OK":          0,
		"RETRY_LATER": 1,
		"UNACCEPTED":  2,
	}
)

func (x HandshakeStatus) Enum() *HandshakeStatus {
	p := new(HandshakeStatus)
	*p = x
	return p
}

func (x HandshakeStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HandshakeStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_packet_v1_packet_proto_enumTypes[0].Descriptor()
}

func (HandshakeStatus) Type() protoreflect.EnumType {
	return &file_packet_v1_packet_proto_enumTypes[0]
}

func (x HandshakeStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HandshakeStatus.Descriptor instead.
func (HandshakeStatus) EnumDescriptor() ([]byte, []int) {
	return file_packet_v1_packet_proto_rawDescGZIP(), []int{0}
}

type CloseReason int32

const (
	CloseReason_NO_ERROR      CloseReason = 0
	CloseReason_REPLACED      CloseReason = 1
	CloseReason_INVALID_STATE CloseReason = 2
	CloseReason_UNKNOWN       CloseReason = 8
	CloseReason_ALERT         CloseReason = 9
)

// Enum value maps for CloseReason.
var (
	CloseReason_name = map[int32]string{
		0: "NO_ERROR",
		1: "REPLACED",
		2: "INVALID_STATE",
		8: "UNKNOWN",
		9: "ALERT",
	}
	CloseReason_value = map[string]int32{
		"NO_ERROR":      0,
		"REPLACED":      1,
		"INVALID_STATE": 2,
		"UNKNOWN":       8,
		"ALERT":         9,
	}
)

func (x CloseReason) Enum() *CloseReason {
	p := new(CloseReason)
	*p = x
	return p
}

func (x CloseReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CloseReason) Descriptor() protoreflect.EnumDescriptor {
	return file_packet_v1_packet_proto_enumTypes[1].Descriptor()
}

func (CloseReason) Type() protoreflect.EnumType {
	return &file_packet_v1_packet_proto_enumTypes[1]
}

func (x CloseReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CloseReason.Descriptor instead.
func (CloseReason) EnumDescriptor() ([]byte, []int) {
	return file_packet_v1_packet_proto_rawDescGZIP(), []int{1}
}

type ClientHandshake struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ProtocolVersion uint32                 `protobuf:"varint,1,opt,name=protocol_version,json=protocolVersion,proto3" json:"protocol_version,omitempty"`
	AuthToken       []byte                 `protobuf:"bytes,2,opt,name=auth_token,json=authToken,proto3" json:"auth_token,omitempty"`
	ExtraParams     map[string][]byte      `protobuf:"bytes,3,rep,name=extra_params,json=extraParams,proto3" json:"extra_params,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	PayloadAckNo    *uint32                `protobuf:"varint,4,opt,name=payload_ack_no,json=payloadAckNo,proto3,oneof" json:"payload_ack_no,omitempty"`
	Reconnect       uint32                 `protobuf:"varint,5,opt,name=reconnect,proto3" json:"reconnect,omitempty"`
	Now             *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=now,proto3" json:"now,omitempty"`
	Namespace       string                 `protobuf:"bytes,7,opt,name=namespace,proto3" json:"namespace,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ClientHandshake) Reset() {
	*x = ClientHandshake{}
	mi := &file_packet_v1_packet_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientHandshake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientHandshake) ProtoMessage() {}

func (x *ClientHandshake) ProtoReflect() protoreflect.Message {
	mi := &file_packet_v1_packet_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientHandshake.ProtoReflect.Descriptor instead.
func (*ClientHandshake) Descriptor() ([]byte, []int) {
	return file_packet_v1_packet_proto_rawDescGZIP(), []int{0}
}

func (x *ClientHandshake) GetProtocolVersion() uint32 {
	if x != nil {
		return x.ProtocolVersion
	}
	return 0
}

func (x *ClientHandshake) GetAuthToken() []byte {
	if x != nil {
		return x.AuthToken
	}
	return nil
}

func (x *ClientHandshake) GetExtraParams() map[string][]byte {
	if x != nil {
		return x.ExtraParams
	}
	return nil
}

func (x *ClientHandshake) GetPayloadAckNo() uint32 {
	if x != nil && x.PayloadAckNo != nil {
		return *x.PayloadAckNo
	}
	return 0
}

func (x *ClientHandshake) GetReconnect() uint32 {
	if x != nil {
		return x.Reconnect
	}
	return 0
}

func (x *ClientHandshake) GetNow() *timestamppb.Timestamp {
	if x != nil {
		return x.Now
	}
	return nil
}

func (x *ClientHandshake) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type ServerHandshake struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ProtocolVersion uint32                 `protobuf:"varint,1,opt,name=protocol_version,json=protocolVersion,proto3" json:"protocol_version,omitempty"`
	Status          HandshakeStatus        `protobuf:"varint,2,opt,name=status,proto3,enum=packet.v1.HandshakeStatus" json:"status,omitempty"`
	Settings        *Settings              `protobuf:"bytes,3,opt,name=settings,proto3" json:"settings,omitempty"`
	PayloadAckNo    *uint32                `protobuf:"varint,4,opt,name=payload_ack_no,json=payloadAckNo,proto3,oneof" json:"payload_ack_no,omitempty"`
	Message         string                 `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ServerHandshake) Reset() {
	*x = ServerHandshake{}
	mi := &file_packet_v1_packet_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServerHandshake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerHandshake) ProtoMessage() {}

func (x *ServerHandshake) ProtoReflect() protoreflect.Message {
	mi := &file_packet_v1_packet_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerHandshake.ProtoReflect.Descriptor instead.
func (*ServerHandshake) Descriptor() ([]byte, []int) {
	return file_packet_v1_packet_proto_rawDescGZIP(), []int{1}
}

func (x *ServerHandshake) GetProtocolVersion() uint32 {
	if x != nil {
		return x.ProtocolVersion
	}
	return 0
}

func (x *ServerHandshake) GetStatus() HandshakeStatus {
	if x != nil {
		return x.Status
	}
	return HandshakeStatus_OK
}

func (x *ServerHandshake) GetSettings() *Settings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *ServerHandshake) GetPayloadAckNo() uint32 {
	if x != nil && x.PayloadAckNo != nil {
		return *x.PayloadAckNo
	}
	return 0
}

func (x *ServerHandshake) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type Settings struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PingInterval  *durationpb.Duration   `protobuf:"bytes,1,opt,name=ping_interval,json=pingInterval,proto3" json:"ping_interval,omitempty"`
	PingTimeout   *durationpb.Duration   `protobuf:"bytes,2,opt,name=ping_timeout,json=pingTimeout,proto3" json:"ping_timeout,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Settings) Reset() {
	*x = Settings{}
	mi := &file_packet_v1_packet_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Settings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Settings) ProtoMessage() {}

func (x *Settings) ProtoReflect() protoreflect.Message {
	mi := &file_packet_v1_packet_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Settings.ProtoReflect.Descriptor instead.
func (*Settings) Descriptor() ([]byte, []int) {
	return file_packet_v1_packet_proto_rawDescGZIP(), []int{2}
}

func (x *Settings) GetPingInterval() *durationpb.Duration {
	if x != nil {
		return x.PingInterval
	}
	return nil
}

func (x *Settings) GetPingTimeout() *durationpb.Duration {
	if x != nil {
		return x.PingTimeout
	}
	return nil
}

type Packet struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	SenderTimestamp   *uint64                `protobuf:"varint,1,opt,name=sender_timestamp,json=senderTimestamp,proto3,oneof" json:"sender_timestamp,omitempty"`
	ReceiverTimestamp *uint64                `protobuf:"varint,2,opt,name=receiver_timestamp,json=receiverTimestamp,proto3,oneof" json:"receiver_timestamp,omitempty"`
	Ping              []byte                 `protobuf:"bytes,3,opt,name=ping,proto3,oneof" json:"ping,omitempty"`
	Pong              []byte                 `protobuf:"bytes,4,opt,name=pong,proto3,oneof" json:"pong,omitempty"`
	PayloadAckNo      *uint32                `protobuf:"varint,5,opt,name=payload_ack_no,json=payloadAckNo,proto3,oneof" json:"payload_ack_no,omitempty"`
	PayloadSeqNo      *uint32                `protobuf:"varint,6,opt,name=payload_seq_no,json=payloadSeqNo,proto3,oneof" json:"payload_seq_no,omitempty"`
	Payload           [][]byte               `protobuf:"bytes,7,rep,name=payload,proto3" json:"payload,omitempty"`
	VolatilePayload   [][]byte               `protobuf:"bytes,8,rep,name=volatile_payload,json=volatilePayload,proto3" json:"volatile_payload,omitempty"`
	NewAuthToken      []byte                 `protobuf:"bytes,9,opt,name=new_auth_token,json=newAuthToken,proto3,oneof" json:"new_auth_token,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Packet) Reset() {
	*x = Packet{}
	mi := &file_packet_v1_packet_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Packet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Packet) ProtoMessage() {}

func (x *Packet) ProtoReflect() protoreflect.Message {
	mi := &file_packet_v1_packet_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Packet.ProtoReflect.Descriptor instead.
func (*Packet) Descriptor() ([]byte, []int) {
	return file_packet_v1_packet_proto_rawDescGZIP(), []int{3}
}

func (x *Packet) GetSenderTimestamp() uint64 {
	if x != nil && x.SenderTimestamp != nil {
		return *x.SenderTimestamp
	}
	return 0
}

func (x *Packet) GetReceiverTimestamp() uint64 {
	if x != nil && x.ReceiverTimestamp != nil {
		return *x.ReceiverTimestamp
	}
	return 0
}

func (x *Packet) GetPing() []byte {
	if x != nil {
		return x.Ping
	}
	return nil
}

func (x *Packet) GetPong() []byte {
	if x != nil {
		return x.Pong
	}
	return nil
}

func (x *Packet) GetPayloadAckNo() uint32 {
	if x != nil && x.PayloadAckNo != nil {
		return *x.PayloadAckNo
	}
	return 0
}

func (x *Packet) GetPayloadSeqNo() uint32 {
	if x != nil && x.PayloadSeqNo != nil {
		return *x.PayloadSeqNo
	}
	return 0
}

func (x *Packet) GetPayload() [][]byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *Packet) GetVolatilePayload() [][]byte {
	if x != nil {
		return x.VolatilePayload
	}
	return nil
}

func (x *Packet) GetNewAuthToken() []byte {
	if x != nil {
		return x.NewAuthToken
	}
	return nil
}

type ConnectionClose struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Reason        CloseReason            `protobuf:"varint,1,opt,name=reason,proto3,enum=packet.v1.CloseReason" json:"reason,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConnectionClose) Reset() {
	*x = ConnectionClose{}
	mi := &file_packet_v1_packet_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectionClose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionClose) ProtoMessage() {}

func (x *ConnectionClose) ProtoReflect() protoreflect.Message {
	mi := &file_packet_v1_packet_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionClose.ProtoReflect.Descriptor instead.
func (*ConnectionClose) Descriptor() ([]byte, []int) {
	return file_packet_v1_packet_proto_rawDescGZIP(), []int{4}
}

func (x *ConnectionClose) GetReason() CloseReason {
	if x != nil {
		return x.Reason
	}
	return CloseReason_NO_ERROR
}

func (x *ConnectionClose) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_packet_v1_packet_proto protoreflect.FileDescriptor

var file_packet_v1_packet_proto_rawDesc = string([]byte{
	0x0a, 0x16, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x93, 0x03, 0x0a, 0x0f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48,
	0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x4e, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x73,
	0x68, 0x61, 0x6b, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x29, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x61, 0x63,
	0x6b, 0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x63, 0x6b, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a,
	0x09, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x2c, 0x0a, 0x03, 0x6e,
	0x6f, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x03, 0x6e, 0x6f, 0x77, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x1a, 0x3e, 0x0a, 0x10, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x61, 0x63, 0x6b, 0x5f, 0x6e, 0x6f, 0x22, 0xf9, 0x01, 0x0a, 0x0f, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x12, 0x29,
	0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a,
	0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x29,
	0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x61, 0x63, 0x6b, 0x5f, 0x6e, 0x6f,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x41, 0x63, 0x6b, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x61, 0x63, 0x6b, 0x5f, 0x6e, 0x6f, 0x22, 0x88, 0x01, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x3e, 0x0a, 0x0d, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x12, 0x3c, 0x0a, 0x0c, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x70, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x22, 0xdb, 0x03, 0x0a, 0x06, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x2e, 0x0a, 0x10,
	0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x12,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x11, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x88, 0x01, 0x01,
	0x12, 0x17, 0x0a, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x02,
	0x52, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x70, 0x6f, 0x6e,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x03, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x88,
	0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x61, 0x63,
	0x6b, 0x5f, 0x6e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x04, 0x52, 0x0c, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x63, 0x6b, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a,
	0x0e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x6f, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x05, 0x52, 0x0c, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x53, 0x65, 0x71, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x76, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x65, 0x5f, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0f, 0x76, 0x6f,
	0x6c, 0x61, 0x74, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x29, 0x0a,
	0x0e, 0x6e, 0x65, 0x77, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x06, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x41, 0x75, 0x74, 0x68,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x73, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x15, 0x0a,
	0x13, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x69, 0x6e, 0x67, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x70, 0x6f, 0x6e, 0x67, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x5f, 0x61, 0x63, 0x6b, 0x5f, 0x6e, 0x6f, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x6f, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x5b, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2a, 0x3a, 0x0a, 0x0f,
	0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x54, 0x52, 0x59,
	0x5f, 0x4c, 0x41, 0x54, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x4e, 0x41, 0x43,
	0x43, 0x45, 0x50, 0x54, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x54, 0x0a, 0x0b, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x4f, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x08, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x10, 0x09, 0x42, 0x4e,
	0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x61, 0x69,
	0x69, 0x63, 0x68, 0x2f, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x70, 0x62, 0x2f, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x67,
	0x6f, 0x2f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2f, 0x76, 0x31, 0xaa, 0x02, 0x10, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_packet_v1_packet_proto_rawDescOnce sync.Once
	file_packet_v1_packet_proto_rawDescData []byte
)

func file_packet_v1_packet_proto_rawDescGZIP() []byte {
	file_packet_v1_packet_proto_rawDescOnce.Do(func() {
		file_packet_v1_packet_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_packet_v1_packet_proto_rawDesc), len(file_packet_v1_packet_proto_rawDesc)))
	})
	return file_packet_v1_packet_proto_rawDescData
}

var file_packet_v1_packet_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_packet_v1_packet_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_packet_v1_packet_proto_goTypes = []any{
	(HandshakeStatus)(0),          // 0: packet.v1.HandshakeStatus
	(CloseReason)(0),              // 1: packet.v1.CloseReason
	(*ClientHandshake)(nil),       // 2: packet.v1.ClientHandshake
	(*ServerHandshake)(nil),       // 3: packet.v1.ServerHandshake
	(*Settings)(nil),              // 4: packet.v1.Settings
	(*Packet)(nil),                // 5: packet.v1.Packet
	(*ConnectionClose)(nil),       // 6: packet.v1.ConnectionClose
	nil,                           // 7: packet.v1.ClientHandshake.ExtraParamsEntry
	(*timestamppb.Timestamp)(nil), // 8: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),   // 9: google.protobuf.Duration
}
var file_packet_v1_packet_proto_depIdxs = []int32{
	7, // 0: packet.v1.ClientHandshake.extra_params:type_name -> packet.v1.ClientHandshake.ExtraParamsEntry
	8, // 1: packet.v1.ClientHandshake.now:type_name -> google.protobuf.Timestamp
	0, // 2: packet.v1.ServerHandshake.status:type_name -> packet.v1.HandshakeStatus
	4, // 3: packet.v1.ServerHandshake.settings:type_name -> packet.v1.Settings
	9, // 4: packet.v1.Settings.ping_interval:type_name -> google.protobuf.Duration
	9, // 5: packet.v1.Settings.ping_timeout:type_name -> google.protobuf.Duration
	1, // 6: packet.v1.ConnectionClose.reason:type_name -> packet.v1.CloseReason
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_packet_v1_packet_proto_init() }
func file_packet_v1_packet_proto_init() {
	if File_packet_v1_packet_proto != nil {
		return
	}
	file_packet_v1_packet_proto_msgTypes[0].OneofWrappers = []any{}
	file_packet_v1_packet_proto_msgTypes[1].OneofWrappers = []any{}
	file_packet_v1_packet_proto_msgTypes[3].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_packet_v1_packet_proto_rawDesc), len(file_packet_v1_packet_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_packet_v1_packet_proto_goTypes,
		DependencyIndexes: file_packet_v1_packet_proto_depIdxs,
		EnumInfos:         file_packet_v1_packet_proto_enumTypes,
		MessageInfos:      file_packet_v1_packet_proto_msgTypes,
	}.Build()
	File_packet_v1_packet_proto = out.File
	file_packet_v1_packet_proto_goTypes = nil
	file_packet_v1_packet_proto_depIdxs = nil
}
